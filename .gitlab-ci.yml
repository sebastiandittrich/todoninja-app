stages:
  - build
  - deploy

image: node:8.12

build:
  stage: build
  script:
    - echo $(git rev-parse --short=8 HEAD) > .commithash
    - npm install
    - npm run build
  artifacts:
    paths:
      - dist
      - .commithash

deploy:
  stage: deploy
  environment: production
  only:
    - master
  variables:
    GIT_STRATEGY: none
  before_script:
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)

    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null

    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    ##
    ## Optionally, if you will be using any Git commands, set the user name and
    ## and email.
    ##
    #- git config --global user.email "user@example.com"
    #- git config --global user.name "User name"

    ##
    ## Assuming you created the SSH_KNOWN_HOSTS variable, uncomment the
    ## following two lines.
    ##
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - dirname="~/deployments/$(date +%s)-$(cat .commithash)"
    - ssh $SSH_USER@$SSH_HOST "cd ~ && (mkdir -p deployments)"
    - scp -r dist $SSH_USER@$SSH_HOST:$dirname
    - ssh $SSH_USER@$SSH_HOST "ln -nfs $dirname ~/app"