/**
 * This injects Tailwind's base styles, which is a combination of
 * Normalize.css and some additional base styles.
 *
 * You can see the styles here:
 * https://github.com/tailwindcss/tailwindcss/blob/master/css/preflight.css
 *
 * If using `postcss-import`, use this import instead:
 *
 * @import "tailwindcss/preflight";
 */
 @tailwind base;

 html {
    @apply leading-tight
 }

 /**
  * This injects any component classes registered by plugins.
  *
  * If using `postcss-import`, use this import instead:
  *
  * @import "tailwindcss/components";
  */
 @tailwind components;

 /**
  * Here you would add any of your custom component classes; stuff that you'd
  * want loaded *before* the utilities so that the utilities could still
  * override them.
  *
  * Example:
  *
  * .btn { ... }
  * .form-input { ... }
  *
  * Or if using a preprocessor or `postcss-import`:
  *
  * @import "components/buttons";
  * @import "components/forms";
  */

body {
  font-family: 'Ubuntu', sans-serif;
}

#app.dark {
    @apply bg-black text-white;
}

/* [class*='dark:'] {
    @apply transition;
} */

* {
    -webkit-tap-highlight-color: transparent;
}

a {
  color: inherit;
  text-decoration: none;
}

.feather.font-bold::before {
    font-weight: bold;
}

input:focus,
select:focus,
textarea:focus,
button:focus {
    outline: none;
}

  .sections-item.router-link-active {
      @apply text-blue font-bold;
  }

  .sections-item:not(.router-link-active) > i {
    @apply text-grey-dark;
}

  .link {
      @apply font-bold text-grey-darkest transition border-b-2 border-grey;
  }
  .link:hover {
      @apply text-black border-black;
  }

#app.dark .link {
    @apply text-grey-lightest border-grey-dark;
}

#app.dark .link:hover {
    @apply text-white border-white;
}


.button {
    @apply cursor-pointer select-none text-blue font-bold self-center mt-8 bg-blue-lightest px-8 py-4 rounded-lg inline-block transition;
}
#app.dark .button {
    @apply bg-blue-darkest text-blue-light
}
.button-secondary {
    @apply button;
    @apply bg-transparent font-normal border border-grey-darker text-grey-darker;
}
#app.dark .button-secondary {
    @apply border-grey-light text-grey-light;
}
.button-secondary:hover {
    @apply button-hover bg-grey-darker text-white;
}

.button-small {
    @apply text-xs px-3 py-2;
}
.button-hover {
    @apply bg-blue text-white shadow-none;
}
.button:hover {
    @apply button-hover
}

.button-red {
    @apply button bg-red-lightest text-red text-sm mt-0;
}
#app.dark .button-red {
    @apply bg-red-darker text-red-lightest;
}
.button-red:hover {
    @apply button-hover bg-red;
}

.stacking {
    display: grid;
    grid-template: 'content' 1fr / 1fr;
    justify-items: stretch;
    align-items: stretch;
}
.stacking > * {
    grid-area: content;
}


.vue-datepicker {
    @apply border-none !important;
}
.vue-datepicker .cell.day {
    @apply transition-short;
}
.vue-datepicker .cell.day.selected {
    @apply bg-blue text-white font-bold rounded-lg shadow-lg !important;
}
.vue-datepicker .cell.day.today {
    @apply border-blue border rounded-full !important;
}


 /**
  * This injects all of Tailwind's utility classes, generated based on your
  * config file.
  *
  * If using `postcss-import`, use this import instead:
  *
  * @import "tailwindcss/utilities";
  */
 @tailwind utilities;

 /**
  * Here you would add any custom utilities you need that don't come out of the
  * box with Tailwind.
  *
  * Example :
  *
  * .bg-pattern-graph-paper { ... }
  * .skew-45 { ... }
  *
  * Or if using a preprocessor or `postcss-import`:
  *
  * @import "utilities/background-patterns";
  * @import "utilities/skew-transforms";
  */

.rounded-t-xl {
    border-top-left-radius: 1.5rem;
    border-top-right-radius: 1.5rem;
}

.bg-theme-gradient {
    background: linear-gradient(-45deg, hsl(224, 28%, 38%), hsl(180, 28%, 38%));
}

.transition {
    transition: all 200ms ease-in-out;
}

.transition-long {
    transition: all 450ms ease-in-out;
}

.transition-short {
    transition: all 150ms ease-in-out;
}

@responsive {
    .-z-10 {
        z-index: -10;
    }
    .-z-20 {
        z-index: -20;
    }
}

::-webkit-input-placeholder {
    z-index: -10
}

.horizontal-scrolling { 
    @apply overflow-x-auto;
}
.horizontal-scrolling::-webkit-scrollbar { 
    display: none; 
}

@screen md {

    .modalframe.modalframe:not(.modal-positioned) {
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
}

/* Experiment */
/* * {
    transform: translateX(-5px)translateY(-5px);
}
#app {
    transform: perspective(2000px)rotateX(70deg)rotateZ(45deg);
} */